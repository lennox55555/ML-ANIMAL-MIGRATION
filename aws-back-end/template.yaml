AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Wildlife Tracking Backend

Resources:
  WildlifeDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  WebSocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WildlifeTrackingAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handlers.connectHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handlers.disconnectHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  MessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: handlers.messageHandler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          DATA_BUCKET: !Ref WildlifeDataBucket
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - S3ReadPolicy:
            BucketName: !Ref WildlifeDataBucket

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations
      IntegrationMethod: POST
      PassthroughBehavior: WHEN_NO_MATCH
      ContentHandlingStrategy: CONVERT_TO_TEXT

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations
      IntegrationMethod: POST
      PassthroughBehavior: WHEN_NO_MATCH
      ContentHandlingStrategy: CONVERT_TO_TEXT

  MessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessageFunction.Arn}/invocations
      IntegrationMethod: POST
      PassthroughBehavior: WHEN_NO_MATCH
      ContentHandlingStrategy: CONVERT_TO_TEXT

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join ['/', ['integrations', !Ref ConnectIntegration]]
      RouteResponseSelectionExpression: $default
      OperationName: ConnectRoute

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join ['/', ['integrations', !Ref DisconnectIntegration]]
      OperationName: DisconnectRoute

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: sendmessage
      AuthorizationType: NONE
      Target: !Join ['/', ['integrations', !Ref MessageIntegration]]
      OperationName: MessageRoute

  ConnectRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteId: !Ref ConnectRoute
      RouteResponseKey: $default

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - MessageRoute
    Properties:
      ApiId: !Ref WebSocketAPI

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketAPI
      DeploymentId: !Ref Deployment
      StageName: prod
      AutoDeploy: true

  ConnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/$connect

  DisconnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/$disconnect

  MessageFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*/sendmessage

Outputs:
  WebSocketURL:
    Description: "WebSocket URL"
    Value: !Sub wss://${WebSocketAPI}.execute-api.${AWS::Region}.amazonaws.com/prod
  BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref WildlifeDataBucket